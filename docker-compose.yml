version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: font_book_postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: font_book_management
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres123
      POSTGRES_HOST_AUTH_METHOD: trust
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/src/database/migrations:/docker-entrypoint-initdb.d
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Adminer for Database Management
  adminer:
    image: adminer:latest
    container_name: font_book_adminer
    restart: unless-stopped
    ports:
      - "8080:8080"
    environment:
      ADMINER_DEFAULT_SERVER: postgres
      ADMINER_DESIGN: pepa-linha-dark
    networks:
      - app-network
    depends_on:
      postgres:
        condition: service_healthy

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: font_book_backend
    restart: unless-stopped
    ports:
      - "5000:5000"
    environment:
      NODE_ENV: development
      PORT: 5000
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: font_book_management
      DB_USER: postgres
      DB_PASSWORD: postgres123
      FRONTEND_URL: http://localhost:5173
      UPLOAD_DIR: /app/uploads
      MAX_FILE_SIZE: 5242880
    volumes:
      - ./backend:/app
      - /app/node_modules
      - backend_uploads:/app/uploads
    networks:
      - app-network
    depends_on:
      postgres:
        condition: service_healthy
    command: npm run dev

  # Frontend React App
  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
    container_name: font_book_frontend
    restart: unless-stopped
    ports:
      - "5173:5173"
    environment:
      VITE_API_URL: http://localhost:5000/api
    volumes:
      - .:/app
      - /app/node_modules
      - /app/backend
    networks:
      - app-network
    depends_on:
      - backend
    command: npm run dev

volumes:
  postgres_data:
    driver: local
  backend_uploads:
    driver: local

networks:
  app-network:
    driver: bridge